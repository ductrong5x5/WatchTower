887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   29) [[package]]
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   30) name = "argh"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   31) version = "0.1.10"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   32) source = "registry+https://github.com/rust-lang/crates.io-index"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   33) checksum = "ab257697eb9496bf75526f0217b5ed64636a9cfafa78b8365c71bd283fcef93e"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   34) dependencies = [
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   35)  "argh_derive",
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   36)  "argh_shared",
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   37) ]
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   38) 
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   39) [[package]]
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   40) name = "argh_derive"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   41) version = "0.1.10"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   42) source = "registry+https://github.com/rust-lang/crates.io-index"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   43) checksum = "b382dbd3288e053331f03399e1db106c9fb0d8562ad62cb04859ae926f324fa6"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   44) dependencies = [
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   45)  "argh_shared",
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   46)  "proc-macro2",
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   47)  "quote",
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   49) ]
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   50) 
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   51) [[package]]
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   52) name = "argh_shared"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   53) version = "0.1.10"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   54) source = "registry+https://github.com/rust-lang/crates.io-index"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   55) checksum = "64cb94155d965e3d37ffbbe7cc5b82c3dd79dd33bd48e536f73d2cfb8d85506f"
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400   56) 
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  365) [[package]]
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  366) name = "hermit-abi"
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  367) version = "0.2.6"
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  368) source = "registry+https://github.com/rust-lang/crates.io-index"
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  369) checksum = "ee512640fe35acbfb4bb779db6f0d80704c2cacfa2e39b601ef3e3f47d1ae4c7"
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  370) dependencies = [
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  371)  "libc",
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  372) ]
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  373) 
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  522) [[package]]
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  523) name = "num_cpus"
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  524) version = "1.15.0"
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  525) source = "registry+https://github.com/rust-lang/crates.io-index"
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  526) checksum = "0fac9e2da13b5eb447a6ce3d392f23a29d8694bff781bf03a16cd9ac8697593b"
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  527) dependencies = [
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  529)  "libc",
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  530) ]
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  531) 
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400  897)  "serde",
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400  898)  "serde_json",
887fc40e watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-23 16:59:37 -0400  994)  "argh",
29b91561 watchtower-sensor/Cargo.lock (Clayton Gilmer 2023-03-26 14:45:18 -0400  998)  "num_cpus",
887fc40e watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-03-23 16:59:37 -0400  7) argh = "0.1.10"
29b91561 watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-03-26 14:45:18 -0400 10) num_cpus = "1.15.0"
887fc40e watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-03-23 16:59:37 -0400 16) ureq = { version = "2.6", features = ["json"] }
d147ba25 watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-03-26 20:28:39 -0400 24)     "Win32_NetworkManagement_IpHelper",
d147ba25 watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-03-26 20:28:39 -0400 25)     "Win32_NetworkManagement_Ndis",
29b91561 watchtower-sensor/src/error.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  3) use crate::sys::OsError;
a594882c watchtower-sensor/src/error.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400  7)     #[error("no GPU found")]
a594882c watchtower-sensor/src/error.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400  8)     NoGpuFound,
a594882c watchtower-sensor/src/error.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 15)     #[cfg(windows)]
a594882c watchtower-sensor/src/error.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 16)     #[error("WMI error")]
a594882c watchtower-sensor/src/error.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 17)     Wmi(#[from] wmi::WMIError),
29b91561 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  3) pub(crate) mod sys;
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400  9) use argh::FromArgs;
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 10) 
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 11) use crate::message::Message;
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 12) 
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 13) #[derive(FromArgs)]
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 14) #[argh(description = "watchtower sensor command-line interface")]
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 15) struct Args {
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 16)     #[argh(option)]
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 17)     #[argh(description = "backend URL")]
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 18)     hostname: String,
f5df9cf1 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-29 10:13:56 -0400 19) 
f5df9cf1 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-29 10:13:56 -0400 20)     #[argh(option)]
f5df9cf1 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-29 10:13:56 -0400 21)     #[argh(description = "sleep time for checkins", default = "5")]
f5df9cf1 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-29 10:13:56 -0400 22)     sleep: u64,
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 23) }
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 24) 
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 28)     let args: Args = argh::from_env();
06d9b640 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 29)     let hostname = &args.hostname;
29b91561 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 30) 
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 31)     let hello = Message::hello()?;
29b91561 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 32)     let hello_string = format!("{hostname}/hello");
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 33) 
29b91561 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 34)     ureq::post(&hello_string).send_json(hello)?;
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 35) 
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 36)     let checkin_string = format!("{hostname}/checkin");
29b91561 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 37) 
887fc40e watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-23 16:59:37 -0400 38)     loop {
29b91561 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 39)         ureq::post(&checkin_string).send_json(Message::battery()?)?;
29b91561 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 40)         ureq::post(&checkin_string).send_json(Message::cpu()?)?;
29b91561 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 41)         ureq::post(&checkin_string).send_json(Message::ram()?)?;
46582453 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 42)         ureq::post(&checkin_string).send_json(Message::net()?)?;
46582453 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 43)         ureq::post(&checkin_string).send_json(Message::gpu()?)?;
f5df9cf1 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-29 10:13:56 -0400 44) 
f5df9cf1 watchtower-sensor/src/main.rs (Clayton Gilmer 2023-03-29 10:13:56 -0400 45)         std::thread::sleep(std::time::Duration::from_secs(args.sleep))
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  6)     sys,
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  7)     types::{
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  8)         battery::Battery, cpu::Cpu, gpu::Gpu, hello::Hello, net::Network, ram::Ram, MessageType,
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  9)     },
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 21)             id: sys::machine_id()?,
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 63) 
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 64)     pub(crate) fn net() -> crate::Result<Message> {
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 65)         Ok(Message {
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 66)             variant: MessageType::Net(Network::collect()?),
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 67)             header: MessageHeader::new()?,
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 68)         })
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 69)     }
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 70) 
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 71)     pub(crate) fn gpu() -> crate::Result<Message> {
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 72)         Ok(Message {
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 73)             variant: MessageType::Gpu(Gpu::collect()?),
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 74)             header: MessageHeader::new()?,
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 75)         })
29b91561 watchtower-sensor/src/message.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 76)     }
46582453 watchtower-sensor/src/sys/darwin.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 19) pub(crate) fn installed_ram() -> crate::Result<u64> {
46582453 watchtower-sensor/src/sys/darwin.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 23) pub(crate) fn ram_usage() -> crate::Result<u64> {
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400   1) use std::{fs::File, io::Read, path::Path};
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400   2) 
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  38)     } else {
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  50)     let mut file = File::open("/proc/stat")?;
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  61)             if v.contains("cpu") {
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  62)             } else {
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  83)     //.expect("Unable to open file");
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  88) 
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  92)                 } else if iskb == true {
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400  94)                     installed = v.parse::<u64>().unwrap();
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 101)     Ok(installed * 1000 as u64)
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 104) pub(crate) fn ram_usage() -> crate::Result<u64> {
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 108)     let mut free = 0;
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 115)     //.expect("Unable to open file");
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 120) 
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 125)                 } else if iskb == true {
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 127)                     total = v.parse::<u64>().unwrap();
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 137)                 } else if iskb == true {
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 139)                     free = v.parse::<u64>().unwrap();
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 149)                 } else if iskb == true {
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 151)                     buff = v.parse::<u64>().unwrap();
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 162)                     } else if iskb == true {
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 164)                         cache = v.parse::<u64>().unwrap();
29b91561 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 175)                 } else if iskb == true {
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 177)                     slab = v.parse::<u64>().unwrap();
46582453 watchtower-sensor/src/sys/linux.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 185)     Ok(total as u64)
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400   2)     collections::HashMap,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400   3)     ffi::{c_void, CStr, CString},
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400   4)     mem::MaybeUninit,
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400   8) use serde::Deserialize;
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400  13)         Foundation::{ERROR_BUFFER_OVERFLOW, ERROR_SUCCESS},
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400  14)         NetworkManagement::IpHelper::{
d7374f4f watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:33:04 -0400  15)             GetAdaptersInfo, GetIfTable2, IF_TYPE_IEEE80211, IP_ADAPTER_INFO, MIB_IF_TABLE2,
d7374f4f watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:33:04 -0400  16)             MIB_IF_TYPE_ETHERNET, MIB_IF_TYPE_LOOPBACK,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400  17)         },
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400  26)                 GetPhysicallyInstalledSystemMemory, GlobalMemoryStatus, MEMORYSTATUS,
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400  27)             },
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400  31) use wmi::{COMLibrary, WMIConnection};
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400  32) 
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  33) use crate::types::{
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  34)     gpu::{Gpu, GpuHello},
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400  35)     net::{Interface, InterfaceStatistics, InterfaceType, Network, NetworkHello},
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  36) };
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  37) 
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 120) 
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 121)         // per MSDN this has to be a minimum of one second :(
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 122)         let duration = std::time::Duration::from_secs(1);
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 144)     Ok(installed * 1000)
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 147) pub(crate) fn ram_usage() -> crate::Result<u64> {
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 154)     Ok((memory_status.dwTotalPhys - memory_status.dwAvailPhys)
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 155)         .try_into()
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 156)         .unwrap())
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 158) 
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 159) pub(crate) fn network_info() -> crate::Result<NetworkHello> {
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 160)     // Use GetAdaptersInfo
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 161)     let mut out = NetworkHello {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 162)         interfaces: HashMap::new(),
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 163)     };
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 164) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 165)     let mut buf = Vec::<IP_ADAPTER_INFO>::with_capacity(0);
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 166) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 167)     unsafe {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 168)         let mut capacity: u32 = 0;
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 169) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 170)         if GetAdaptersInfo(Some(buf.as_mut_ptr()), &mut capacity) == ERROR_BUFFER_OVERFLOW.0 {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 171)             assert!(capacity as usize % std::mem::size_of::<IP_ADAPTER_INFO>() == 0);
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 172) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 173)             buf.reserve_exact(capacity as usize / std::mem::size_of::<IP_ADAPTER_INFO>());
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 174)             if GetAdaptersInfo(Some(buf.as_mut_ptr()), &mut capacity) != ERROR_SUCCESS.0 {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 175)                 return Err(crate::Error::Os(windows::core::Error::from_win32()));
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 176)             }
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 177) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 178)             assert!(capacity as usize % std::mem::size_of::<IP_ADAPTER_INFO>() == 0);
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 179) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 180)             buf.set_len(capacity as usize / std::mem::size_of::<IP_ADAPTER_INFO>());
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 181)         } else {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 182)             return Err(crate::Error::Os(windows::core::Error::from_win32()));
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 183)         }
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 184) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 185)         for adapter in buf {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 186)             let name = CStr::from_ptr(adapter.AdapterName.as_ptr() as *const i8)
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 187)                 .to_string_lossy()
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 188)                 .to_string()
d7374f4f watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:33:04 -0400 189)                 .replace('\"', "");
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 190) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 191)             let mac_address = format!(
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 192)                 "{:02x}:{:02x}:{:02x}:{:02x}:{:02x}:{:02x}",
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 193)                 adapter.Address[0],
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 194)                 adapter.Address[1],
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 195)                 adapter.Address[2],
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 196)                 adapter.Address[3],
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 197)                 adapter.Address[4],
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 198)                 adapter.Address[5]
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 199)             );
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 200) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 201)             let description = CStr::from_ptr(adapter.Description.as_ptr() as *const i8)
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 202)                 .to_string_lossy()
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 203)                 .to_string()
d7374f4f watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:33:04 -0400 204)                 .replace('\"', "");
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 205) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 206)             let r#type = match adapter.Type {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 207)                 MIB_IF_TYPE_LOOPBACK => InterfaceType::Loopback,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 208)                 MIB_IF_TYPE_ETHERNET => InterfaceType::Ethernet,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 209)                 IF_TYPE_IEEE80211 => InterfaceType::WiFi,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 210)                 _ => InterfaceType::Other,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 211)             };
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 212) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 213)             let ip_addresses = {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 214)                 let mut list: Vec<String> = Vec::new();
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 215)                 let mut current = adapter.IpAddressList;
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 216) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 217)                 list.push(
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 218)                     CStr::from_ptr(current.IpAddress.String.as_ptr() as *const i8)
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 219)                         .to_string_lossy()
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 220)                         .to_string(),
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 221)                 );
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 222) 
d7374f4f watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:33:04 -0400 223)                 while !current.Next.is_null() {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 224)                     current = *current.Next;
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 225) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 226)                     list.push(
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 227)                         CStr::from_ptr(current.IpAddress.String.as_ptr() as *const i8)
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 228)                             .to_string_lossy()
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 229)                             .to_string(),
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 230)                     );
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 231)                 }
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 232) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 233)                 list
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 234)             };
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 235) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 236)             out.interfaces.insert(
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 237)                 mac_address,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 238)                 Interface {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 239)                     name,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 240)                     description,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 241)                     r#type,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 242)                     ip_addresses,
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 243)                 },
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 244)             );
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 245)         }
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 246)     }
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 247) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 248)     Ok(out)
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 249) }
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 250) 
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 251) pub(crate) fn network_statistics() -> crate::Result<Network> {
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 252)     // Use GetIfTable2
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 253)     let mut out = Network {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 254)         interfaces: HashMap::new(),
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 255)     };
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 256) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 257)     unsafe {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 258)         let mut uninit = MaybeUninit::<*mut MIB_IF_TABLE2>::uninit();
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 259) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 260)         GetIfTable2(uninit.as_mut_ptr())?;
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 261) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 262)         let table = uninit.assume_init();
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 263) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 264)         let entries =
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 265)             std::slice::from_raw_parts((*table).Table.as_ptr(), (*table).NumEntries as usize);
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 266) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 267)         for entry in entries {
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 268)             let mac_address = format!(
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 269)                 "{:02x}:{:02x}:{:02x}:{:02x}:{:02x}:{:02x}",
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 270)                 entry.PhysicalAddress[0],
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 271)                 entry.PhysicalAddress[1],
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 272)                 entry.PhysicalAddress[2],
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 273)                 entry.PhysicalAddress[3],
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 274)                 entry.PhysicalAddress[4],
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 275)                 entry.PhysicalAddress[5]
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 276)             );
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 277) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 278)             let rx = entry.InOctets;
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 279)             let tx = entry.OutOctets;
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 280) 
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 281)             out.interfaces
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 282)                 .insert(mac_address, InterfaceStatistics { rx, tx });
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 283)         }
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 284)     }
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 285) 
d147ba25 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 286)     Ok(out)
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 287) }
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 288) 
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 289) pub(crate) fn gpu_info() -> crate::Result<GpuHello> {
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 290)     let com = COMLibrary::new()?;
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 291)     let wmi = WMIConnection::new(com)?;
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 292) 
46582453 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 293)     #[allow(non_camel_case_types, non_snake_case)]
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 294)     #[derive(Debug, Deserialize)]
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 295)     struct Win32_VideoController {
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 296)         Caption: String,
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 297)         AdapterRAM: u64,
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 298)     }
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 299) 
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 300)     let results: Vec<Win32_VideoController> = wmi.query()?;
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 301) 
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 302)     // just get first GPU for now
d7374f4f watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:33:04 -0400 303)     if !results.is_empty() {
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 304)         return Ok(GpuHello {
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 305)             name: results[0].Caption.clone(),
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 306)             installed_vram: results[0].AdapterRAM,
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 307)         });
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 308)     }
d7374f4f watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:33:04 -0400 309) 
d7374f4f watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:33:04 -0400 310)     Err(crate::Error::NoGpuFound)
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 311) }
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 312) 
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 313) pub(crate) fn gpu_statistics() -> crate::Result<Gpu> {
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 314)     let mut hquery = isize::default();
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 315)     let mut hcounter = isize::default();
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 316) 
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 317)     unsafe {
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 318)         if PdhOpenQueryW(None, 0, &mut hquery) != ERROR_SUCCESS.0 {
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 319)             return Err(crate::error::Error::Os(windows::core::Error::from_win32()));
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 320)         }
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 321) 
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 322)         if PdhAddEnglishCounterW(
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 323)             hquery,
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 324)             w!("\\GPU Process Memory(*)\\Dedicated Usage"),
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 325)             0,
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 326)             &mut hcounter,
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 327)         ) != ERROR_SUCCESS.0
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 328)         {
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 329)             return Err(crate::error::Error::Os(windows::core::Error::from_win32()));
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 330)         }
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 331) 
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 332)         PdhCollectQueryData(hquery);
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 333)     }
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 334) 
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 335)     let mut counter_val = PDH_FMT_COUNTERVALUE::default();
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 336) 
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 337)     unsafe {
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 338)         PdhGetFormattedCounterValue(hcounter, PDH_FMT_DOUBLE, None, &mut counter_val);
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 339) 
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 340)         Ok(Gpu {
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 341)             current_vram_usage: counter_val.Anonymous.doubleValue as u64,
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 342)         })
a594882c watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 343)     }
29b91561 watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 344) }
29b91561 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  3) use crate::sys;
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400  6) pub(crate) struct BatteryHello {
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400  8) }
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400  9) 
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 10) impl BatteryHello {
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 11)     pub(crate) fn collect() -> crate::Result<Self> {
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 12)         Ok(Self {
29b91561 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 13)             has_battery: sys::has_battery()?,
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 14)         })
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 15)     }
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 16) }
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 17) 
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 18) #[derive(Debug, Deserialize, Serialize)]
06d9b640 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 19) pub(crate) struct Battery {
29b91561 watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 26)             percent: sys::battery_percent()?,
a594882c watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 30) 
a594882c watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 31) #[cfg(test)]
a594882c watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 32) mod tests {
a594882c watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 33)     use super::*;
a594882c watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 34) 
a594882c watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 35)     #[test]
a594882c watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 36)     fn battery() {
a594882c watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 37)         Battery::collect().unwrap();
a594882c watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 38)     }
a594882c watchtower-sensor/src/types/battery.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 39) }
29b91561 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  3) use crate::sys;
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400  6) pub(crate) struct CpuHello {
29b91561 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  8)     thread_count: usize,
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400  9) }
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 10) 
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 11) impl CpuHello {
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 12)     pub(crate) fn collect() -> crate::Result<Self> {
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 13)         Ok(Self {
29b91561 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 14)             core_count: num_cpus::get_physical(),
29b91561 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 15)             thread_count: num_cpus::get(),
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 16)         })
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 17)     }
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 18) }
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 19) 
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 20) #[derive(Debug, Deserialize, Serialize)]
06d9b640 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 21) pub(crate) struct Cpu {
29b91561 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 28)             usage_percent: sys::cpu_usage_percent()?,
a594882c watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 32) 
a594882c watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 33) #[cfg(test)]
a594882c watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 34) mod tests {
a594882c watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 35)     use super::*;
46582453 watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 36) 
a594882c watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 37)     #[test]
a594882c watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 38)     fn cpu() {
a594882c watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 39)         Cpu::collect().unwrap();
a594882c watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 40)     }
a594882c watchtower-sensor/src/types/cpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 41) }
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  1) use serde::{Deserialize, Serialize};
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  2) 
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  3) use crate::sys;
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  4) 
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  5) #[derive(Debug, Deserialize, Serialize)]
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  6) pub(crate) struct GpuHello {
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400  7)     pub(crate) name: String,
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400  8)     pub(crate) installed_vram: u64,
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  9) }
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 10) 
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 11) impl GpuHello {
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 12)     pub(crate) fn collect() -> crate::Result<Self> {
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 13)         sys::gpu_info()
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 14)     }
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 15) }
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 16) 
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 17) #[derive(Debug, Deserialize, Serialize)]
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 18) pub(crate) struct Gpu {
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 19)     pub(crate) current_vram_usage: u64,
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 20) }
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 21) 
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 22) impl Gpu {
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 23)     pub(crate) fn collect() -> crate::Result<Self> {
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 24)         sys::gpu_statistics()
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 25)     }
29b91561 watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 26) }
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 27) 
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 28) #[cfg(test)]
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 29) mod tests {
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 30)     use super::*;
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 31) 
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 32)     #[test]
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 33)     fn gpu() {
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 34)         Gpu::collect().unwrap();
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 35)     }
a594882c watchtower-sensor/src/types/gpu.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 36) }
46582453 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400  3) use super::{gpu::GpuHello, net::NetworkHello};
46582453 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400  4) use crate::types::{battery::BatteryHello, cpu::CpuHello, ram::RamHello};
29b91561 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  5) 
06d9b640 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 10)     battery: BatteryHello,
06d9b640 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 11)     cpu: CpuHello,
06d9b640 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 12)     ram: RamHello,
d147ba25 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 13)     network: NetworkHello,
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 14)     gpu: GpuHello,
06d9b640 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 21)             battery: BatteryHello::collect()?,
06d9b640 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 22)             cpu: CpuHello::collect()?,
06d9b640 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 23)             ram: RamHello::collect()?,
d147ba25 watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 24)             network: NetworkHello::collect()?,
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 25)             gpu: GpuHello::collect()?,
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 29) 
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 30) #[cfg(test)]
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 31) mod tests {
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 32)     use super::*;
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 33) 
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 34)     #[test]
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 35)     fn hello() {
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 36)         Hello::collect().unwrap();
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 37)     }
a594882c watchtower-sensor/src/types/hello.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 38) }
29b91561 watchtower-sensor/src/types/mod.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  5) pub(crate) mod gpu;
29b91561 watchtower-sensor/src/types/mod.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  7) pub(crate) mod net;
29b91561 watchtower-sensor/src/types/mod.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 20)     #[serde(rename = "net")]
29b91561 watchtower-sensor/src/types/mod.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 21)     Net(net::Network),
29b91561 watchtower-sensor/src/types/mod.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 22)     #[serde(rename = "gpu")]
29b91561 watchtower-sensor/src/types/mod.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 23)     Gpu(gpu::Gpu),
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  1) use std::collections::HashMap;
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  2) 
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  3) use serde::{Deserialize, Serialize};
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  4) 
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  5) use crate::sys;
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  6) 
d147ba25 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400  7) #[derive(Debug, Hash, Deserialize, Serialize)]
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  8) pub(crate) enum InterfaceType {
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  9)     Loopback,
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 10)     Ethernet,
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 11)     WiFi,
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 12)     Other,
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 13) }
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 14) 
d147ba25 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 15) #[derive(Debug, Hash, Deserialize, Serialize)]
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 16) pub(crate) struct Interface {
46582453 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 17)     pub(crate) name: String,              // Name of this interface
46582453 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 18)     pub(crate) description: String,       // Description associated with interface
46582453 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 19)     pub(crate) r#type: InterfaceType,     // Interface type (see `InterfaceType` enum)
46582453 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 20)     pub(crate) ip_addresses: Vec<String>, // List of IP addresses associated with this interface
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 21) }
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 22) 
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 23) #[derive(Debug, Deserialize, Serialize)]
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 24) pub(crate) struct NetworkHello {
d147ba25 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 25)     pub(crate) interfaces: HashMap<String, Interface>, // Key is MAC address
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 26) }
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 27) 
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 28) impl NetworkHello {
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 29)     pub fn collect() -> crate::Result<Self> {
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 30)         sys::network_info()
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 31)     }
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 32) }
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 33) 
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 34) #[derive(Debug, Deserialize, Serialize)]
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 35) pub(crate) struct InterfaceStatistics {
d147ba25 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 36)     pub(crate) rx: u64, // Recieved bytes
d147ba25 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 37)     pub(crate) tx: u64, // Transmitted bytes
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 38) }
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 39) 
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 40) #[derive(Debug, Deserialize, Serialize)]
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 41) pub(crate) struct Network {
d147ba25 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 20:28:39 -0400 42)     pub(crate) interfaces: HashMap<String, InterfaceStatistics>, // Key is MAC address
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 43) }
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 44) 
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 45) impl Network {
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 46)     pub fn collect() -> crate::Result<Self> {
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 47)         sys::network_statistics()
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 48)     }
29b91561 watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 49) }
a594882c watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 50) 
a594882c watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 51) #[cfg(test)]
a594882c watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 52) mod tests {
a594882c watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 53)     use super::*;
a594882c watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 54) 
a594882c watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 55)     #[test]
a594882c watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 56)     fn network() {
a594882c watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 57)         Network::collect().unwrap();
a594882c watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 58)     }
a594882c watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 59) }
29b91561 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400  3) use crate::sys;
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400  6) pub(crate) struct RamHello {
46582453 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400  7)     installed: u64,
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400  8) }
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400  9) 
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 10) impl RamHello {
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 11)     pub(crate) fn collect() -> crate::Result<Self> {
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 12)         Ok(Self {
46582453 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 13)             installed: sys::installed_ram()?,
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 14)         })
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 15)     }
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 16) }
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 17) 
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 18) #[derive(Debug, Deserialize, Serialize)]
06d9b640 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 13:31:37 -0400 19) pub(crate) struct Ram {
46582453 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 20)     usage: u64,
29b91561 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-26 14:45:18 -0400 26)             usage: sys::ram_usage()?,
a594882c watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 30) 
a594882c watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 31) #[cfg(test)]
a594882c watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 32) mod tests {
a594882c watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 33)     use super::*;
46582453 watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:31:22 -0400 34) 
a594882c watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 35)     #[test]
a594882c watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 36)     fn ram() {
a594882c watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 37)         Ram::collect().unwrap();
a594882c watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 38)     }
a594882c watchtower-sensor/src/types/ram.rs (Clayton Gilmer 2023-03-27 14:22:30 -0400 39) }

6207b0484 watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-04-26 13:33:12 -0400  7) name = "sensor"
acbdc2eea watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-04-25 09:26:51 -0400 38) tray-item = "0.7.1"
acbdc2eea watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-04-25 09:26:51 -0400 51) sysctl = "0.4.0"
acbdc2eea watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-04-25 09:26:51 -0400 53)
acbdc2eea watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-04-25 09:26:51 -0400 54) [target.'cfg(windows)'.build-dependencies]
acbdc2eea watchtower-sensor/Cargo.toml (Clayton Gilmer 2023-04-25 09:26:51 -0400 55) windres = "0.2.2"
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400  3) This program collects various bits of system information:
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400  5) - Battery
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400  6)     - Is a battery installed?
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400  7)     - Battery percentage
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400  8) - CPU
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400  9)     - Name
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 10)     - Core count
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 11)     - Thread count
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 12)     - Max clock speed
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 13)     - Current clock speed
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 14)     - Load percent
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 15)     - Temperature (not implemented on Windows)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 16) - Disks (for each)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 17)     - Name
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 18)     - Type (SSD, HDD, other)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 19)     - Is this disk removable?
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 20)     - Capacity
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 21)     - Usage
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 22) - GPU
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 23)     - Name
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 24)     - Installed VRAM
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 25)     - Max frequency (not implemented on Windows)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 26)     - Current VRAM usage
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 27)     - Current frequency (not implemented on Windows)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 28)     - Current temperature (not implemented on Windows)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 29) - Network interfaces (for each)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 30)     - Name
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 31)     - Description
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 32)     - MAC address
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 33)     - Type (Loopback, Wifi, Ethernet, Other)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 34)     - IP addresses
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 35)     - Recieved bytes
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 36)     - Transmitted bytes
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 37) - RAM
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 38)     - Installed amount
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 39)     - Current usage
5c80d64bc watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:24:04 -0400 41) Collected information is serialized to JSON and sent over HTTP POST request to
5c80d64bc watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:24:04 -0400 42) a configured backend.
5c80d64bc watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:24:04 -0400 43)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 44) ## How to compile the sensor
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 48) - Run `cargo build --release` within this directory.
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 49)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 50) ## How to run the sensor
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 51)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 52) - Compile following the instructions above.
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 53) - Run `cargo run --bin sensor -- --hostname <backend URL> --checkin_interval <checkin time in seconds>` within this directory.
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 54)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 55) ## How to compile the Windows installer
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 56)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 57) - Compile the sensor following the instructions above.
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 58) - Install Inno Setup.
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 59) - Open `watchtower-sensor/installer/windows/sensor.iss` in Inno Setup Compiler.
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 60) - Press the Compile button (Ctrl+F9)
64938545f watchtower-sensor/README.md (Clayton Gilmer 2023-04-26 16:20:03 -0400 61) - The compiled installer will be in `watchtower-sensor/installer/windows/Output`
acbdc2eea watchtower-sensor/build.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 1) fn main() {
acbdc2eea watchtower-sensor/build.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 2)     #[cfg(windows)]
acbdc2eea watchtower-sensor/build.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 3)     windres::Build::new().compile("sensor.rc").unwrap();
acbdc2eea watchtower-sensor/build.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 4) }
6207b0484 watchtower-sensor/src/bin/scratch.rs (Clayton Gilmer 2023-04-26 13:33:12 -0400 4)     println!("{}", serde_json::to_string_pretty(&Message::disk().unwrap()).unwrap())
6207b0484 watchtower-sensor/src/bin/sensor.rs  (Clayton Gilmer 2023-04-26 13:33:12 -0400  1) #![windows_subsystem = "windows"]
6207b0484 watchtower-sensor/src/bin/sensor.rs  (Clayton Gilmer 2023-04-26 13:33:12 -0400  2)
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400  3) use std::fs::File;
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400  4)
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400  6) use serde::Deserialize;
1c614bb96 watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-21 15:31:33 -0400 16)             match dbg!(ureq::post(path).send_json(&data)) {
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 26) #[cfg(windows)]
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 27) mod tray {
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 28)     use std::process::Command;
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 29)
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 30)     use tray_item::TrayItem;
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 31)     use watchtower_sensor::Result;
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 32)
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 33)     pub fn add_tray_icon() -> Result<TrayItem> {
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 34)         let mut tray = TrayItem::new("Watchtower Sensor", "icon")?;
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 35)
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 36)         tray.add_menu_item("Restart", || {
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 37)             Command::new(std::env::current_exe().unwrap())
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 38)                 .args(std::env::args_os().skip(1))
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 39)                 .spawn()
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 40)                 .unwrap();
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 41)
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 42)             std::process::exit(0);
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 43)         })?;
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 44)
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 45)         tray.add_menu_item("Quit", || {
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 46)             std::process::exit(0);
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 47)         })?;
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 48)
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 49)         Ok(tray)
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 50)     }
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 51) }
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 52)
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400 53) #[derive(FromArgs, Deserialize)]
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400 61)     #[argh(description = "checkin time in seconds", default = "5")]
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400 62)     checkin_interval: u64,
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400 68)     let args: Args = {
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400 69)         match File::open("config.json") {
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 70)             Ok(f) => serde_json::from_reader(f)?,
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 71)             Err(_) => argh::from_env(),
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400 72)         }
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400 73)     };
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400 74)
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 75)     #[cfg(windows)]
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 76)     let _tray = tray::add_tray_icon()?;
acbdc2eea watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 09:26:51 -0400 77)
11c7d0eda watchtower-sensor/src/bin/default.rs (Clayton Gilmer 2023-04-25 08:49:05 -0400 95)         std::thread::sleep(std::time::Duration::from_secs(args.checkin_interval))
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400  35)     net::{Interface, InterfaceType, Network, NetworkHello}, disk::{DiskHello, Disk},
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 210) pub(crate) fn network_info() -> crate::Result<HashMap<String, Interface>> {
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 212)     let mut out = HashMap::new();
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 285)             out.insert(
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 292)                     rx: 0,
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 293)                     tx: 0,
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 323)             match out.get_mut(&mac_address) {
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 324)                 Some(iface) => {
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 325)                     iface.rx = rx;
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 326)                     iface.tx = tx;
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 327)                 },
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 328)                 None => continue,
5186aae8e watchtower-sensor/src/sys/windows.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 329)             }
5186aae8e watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400  3) use serde::Serialize;
6207b0484 watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 13:33:12 -0400  4) use sysinfo::{DiskExt, DiskType, SystemExt};
6207b0484 watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 13:33:12 -0400 25)         let mut query = sysinfo::System::new_all();
5186aae8e watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 44) #[derive(Debug, Serialize)]
5186aae8e watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 46)     disks: HashMap<String, DiskInfo>,
6207b0484 watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 13:33:12 -0400 55)         let mut query = sysinfo::System::new_all();
5186aae8e watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 59)             let info = DiskInfo {
5186aae8e watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 60)                 r#type: disk.type_(),
5186aae8e watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 61)                 capacity: disk.total_space(),
5186aae8e watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 63)                 is_removable: disk.is_removable(),
5186aae8e watchtower-sensor/src/types/disk.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 67)                 .insert(disk.name().to_string_lossy().to_string(), info);
5186aae8e watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 21)     pub(crate) rx: u64, // Recieved bytes
5186aae8e watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 22)     pub(crate) tx: u64, // Transmitted bytes
5186aae8e watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 32)         Ok(NetworkHello {
5186aae8e watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 33)             interfaces: sys::network_info()?
5186aae8e watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 34)         })
5186aae8e watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 40)     pub(crate) interfaces: HashMap<String, Interface>, // Key is MAC address
5186aae8e watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 45)         Ok(Network {
5186aae8e watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 46)             interfaces: sys::network_info()?
5186aae8e watchtower-sensor/src/types/net.rs (Clayton Gilmer 2023-04-26 10:02:48 -0400 47)         })
6207b0484 watchtower-sensor/installer/windows/config.json (Clayton Gilmer 2023-04-26 13:33:12 -0400 1) {
6207b0484 watchtower-sensor/installer/windows/config.json (Clayton Gilmer 2023-04-26 13:33:12 -0400 2)     "hostname": "http://hostname.com",
6207b0484 watchtower-sensor/installer/windows/config.json (Clayton Gilmer 2023-04-26 13:33:12 -0400 3)     "checkin_interval": 5
6207b0484 watchtower-sensor/installer/windows/config.json (Clayton Gilmer 2023-04-26 13:33:12 -0400 4) }
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400  1) [Setup]
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400  2) AppName=Watchtower Sensor
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400  3) AppVersion=0.1
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400  4) WizardStyle=modern
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400  5) DefaultDirName={autopf}\Watchtower Sensor
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400  6) DefaultGroupName=Watchtower Sensor
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400  7) UninstallDisplayIcon={app}\sensor.exe
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400  8) Compression=lzma2
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400  9) SolidCompression=yes
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 10) ArchitecturesAllowed=x64
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 11)
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 12) [Files]
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 13) Source: "..\..\target\release\sensor.exe"; DestDir: "{app}"
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 14) Source: "config.json"; DestDir: "{app}"
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 15)
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 16) [Icons]
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 17) Name: "{group}\Watchtower Sensor"; Filename: "{app}\sensor.exe"
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 18)
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 19) [Run]
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 20) Filename: "notepad.exe"; Parameters: "{app}\config.json"
6207b0484 watchtower-sensor/installer/windows/sensor.iss (Clayton Gilmer 2023-04-26 13:33:12 -0400 21) Filename: "{app}\sensor.exe"; Flags: postinstall
